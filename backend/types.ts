import type { RecordingId, UserId } from "./database.js";

export type UUID = ReturnType<typeof crypto.randomUUID>;

export type RecordingEvent = (arg: {
    action: "start" | "stop";
    from: UUID;
}) => void;

export interface ServerToClientEvents {
    signal: (arg: {
        from: UUID;
        desc?: RTCSessionDescription | null;
        candidate?: RTCIceCandidate | null;
    }) => void;
    connect_to: (arg: { id: UUID; polite: boolean }) => void;
    disconnect_from: (arg: { id: UUID }) => void;
    recording: RecordingEvent;
}

export interface ClientToServerEvents {
    set_id: (arg: { id: UUID }, callback: () => void) => void;

    signal: (arg: {
        to: UUID;
        desc?: RTCSessionDescription | null;
        candidate?: RTCIceCandidate | null;
    }) => void;
    join_room: (arg: { id: string; name: string }) => void;
    leave_room: () => void;
    recording: RecordingEvent;

    upload_start: (
        arg: { mimeType: string },
        callback: (
            arg: { id: UUID; error?: never } | { id?: never; error: string }
        ) => void
    ) => void;
    upload_chunk: (id: UUID, data: Blob | Buffer) => void;
    upload_stop: (id: UUID) => void;
}

export interface InterServerEvents {}

export interface SocketData {
    /** A temporary UUID assigned to this user for the sake of signalling */
    signalId?: UUID;
    /** The database ID of this user */
    userId?: UserId;
    /** The user's name */
    userName?: string;
    /** The id of the room the user is connected to */
    roomId?: string;
}

export type Socket = import("socket.io-client").Socket<
    ServerToClientEvents,
    ClientToServerEvents
>;

export type UserEvents = ServerToClientEvents;

export interface RoomEvents {
    join: (arg: { id: UUID }) => void;
    leave: (arg: { id: UUID }) => void;
    recording: RecordingEvent;
}

/** Upload events generated by the server */
export interface UploadEvents {
    start: (from: UUID, id: RecordingId, mimeType: string) => void;
    chunk: (from: UUID, id: RecordingId, data: Buffer) => void;
    stop: (from: UUID, id: RecordingId) => void;
}

export interface PublisherEvents {
    [key: `user/${UUID}`]: UserEvents;
    [key: `room/${string}`]: RoomEvents;
    upload: UploadEvents;
}
